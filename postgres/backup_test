#!/bin/bash
#_   _ _____ ___________   _____  ___
#| | | |_   _/  ___| ___ \ /  ___|/ _ \
#| |_| | | | \ `--.| |_/ / \ `--./ /_\ \
#|  _  | | |  `--. \  __/   `--. \  _  |
#| | | |_| |_/\__/ / |     /\__/ / | | |
#\_| |_/\___/\____/\_|     \____/\_| |_/
#Author	: Renier Rousseau
#Created Date 	: June 2018
#"Usage: the script is designed to called from a (or the existing) backup script,
# so as to test and verify the backup that has just taken place, and/or to be
# called standalone to test a particular backup file - in either case, the
# script is called and passed a variable of the backup file absolute path.
# If no variable or filename is passed, then the script will build a tree
# of the current location, and all subfolders, and begin iterating through
# all found backup files and testing each one.
# As it works, it logs the process as it goes, to the /tmp folder..."

#Syntax: backup_test [optional switches] backupfilename

#TODO add a option to specify the backup.conf file.
#TODO add a check on the backup.conf file lookup.
#TODO allow testing for the folder that pg_dump -Fd creates
#TODO allow for SQL files to be passed.
#TODO add test for psql access

#Functions
## Usage
usage() {
  echo "Usage: backup_test [options] <file/folder name>"
  echo " -a --all : All file and folders in the current folder.( $(pwd) )"
  echo " -h --help : Print this Message."
  echo " If there is no options or file/folder passed the current content "
  echo "  of this folder will be tested."
  exit 1
}

## 7zip Error Checking
7zipErrorCheck () {
	case "$1" in
		#Exit without Error
		0)
			echo "7zip : Zip Successful"
		;;
		#Exit with Error
		1)
			echo "ERROR : 7zip : Non Fatal Error - Not all files where accessable."
		;;
		#Exit with Fatel Error
		2)
			echo "ERROR : 7zip : Fatal error"
		;;
		#Exit with Syntax Error
		7)
			echo "ERROR : 7zip : Syntax Error"
		;;
		#Exit with Memory Error
		8)
			echo "ERROR : 7zip : Not Enough Memory For Operation"
		;;
		#Exit with User Intervention
		255)
			echo "ERROR : 7zip : User stopped the process"
		;;
	esac
}

##Test file
backupTest () {
  #Test if there is a Parameter and if its a file.
  if [[ -f $1 ]]; then
    #Test what kind of file is being passed
    file_type=$(file -0 $1 | cut -d ' ' -f 2)
    #if file_type is 7-zip
    if [[ $file_type == "7-zip" ]]; then
      #tested true for 7-zip file.
      #extract file $1 to $test_dir/$1
      mkdir $test_dir/$1
      7z x -p$encrypt_key $1 -o$test_dir/$1
      7zipErrorCheck $?

      #Getting dump name
      dump=$(ls $test_dir/$1 | head -n 1)

      #Try and extract the unziped content into test_db.
      ##Creating test_db
      createdb -O dhis test_db
      ##Pushing data into test_db
      /usr/bin/pg_restore --dbname=test_db --format=directory --jobs=5 $test_dir/$1/$dump
      ##Cleaning up test_db
      dropdb test_db

      #Cleaning up the test_dir
      rm -R $test_dir/$1

      #All Good message
      echo "Testing for backup $1 completed"
    else
      #ERROR if its not a 7zip file.
      echo "Error : backupTest : File type not expected - $file_type."
    fi
  else
    echo "Error : backupTest : Invalid Parrter pased to backupTest Function - "
    echo " Parameter = $1"
  fi
}

#folder Testing
folderTest () {
    #This funciton will iterate though a folder looking for backup files and
    # Test them.

    #Test if its a folder that has been pased.
    if [[ -d $1 ]]; then
      dir_cont=$(ls $1)
      for i in $dir_cont; do
        #Move though each item in the folder passed and -
        ##Test if the item is a dir -
        if [[ -d $i ]]; then
          ### if its a dir pass it back to this function to go deeper int othe structure
          folderTest $i
        ##or a file -
        elif [[ -f $i ]]; then
          ### if its a file pass it to backupTest
          backupTest $i
        ##other wise give an error.
        else
          echo "ERROR : folderTest : $i is of unexpected type."
        fi
      done
    else
      echo "ERROR : folderTest : $1 is not a folder."
    fi

}

#Varriables
## Flags and arguments
all_flag=0
dir_flag=0
dir_name=''
file_flag=0
file_name=''

## System Variables
### backup config file
conf_file="~/backup.conf"
conf_file_flag=0


#while loop for Usage
while [ "$1" != "" ]; do
  case $1 in
    -a | --all )
    all_flag=1
    ;;
    -h | --help )
    usage
    ;;
    * )
    if [[ $dir_flag == 0 && $file_flag == 0 ]]; then
      #test if $1 is a file
      if [[ -f "$1" ]]; then
        echo "File $1 found and will be tested."
        file_flag=1
        file_name=$1
        #test if $1 is a direcory
      elif [[ -d "$1" ]]; then
        echo "Folder $1 found and the content will be tested."
        dir_flag=1
        dir_name=$1
      else
        echo "File/Folder $1 not found."
        usage
      fi
    else
      if [[ $dir_flag == 1 ]]; then
        echo "The folder $dir_name has already been listed for testing"
        echo " currently there is no support for multiple folders"
      elif [[ $file_flag == 1 ]]; then
        echo "The file $file_name has already been listed for testing "
        echo " currently there is no support for listing multiple files "
        echo " you can how ever specify the folder if both files lie in the"
        echo " same folder. i.e /path/to"
      fi
    fi
  esac
  shift
done

#catch all if no folder/file was specifed
if [[ $dir_flag == 0 && $file_flag == 0 ]]; then
  dir_flag=1
  dir_name=$(pwd)
  echo "Folder $dir_name will be tested."
fi

#Read the backup.conf file
source ~/backup.conf

#build the dir structure for working in. then destroy it.
##Varriables
### test_dir will be a hidden file in them with a data stamp
test_dir="/tmp/.db_test_$dateinfo"

## Creating the base folder
mkdir $test_dir

#Testing for file
if [[ $file_flag == 1 ]]; then
  #working with that specific file
  backupTest $file_name

elif [[ $dir_flag == 1 ]]; then
  #working with that specific folder
  folderTest $dir_name

else
  #working in current direcory
  echo "Current Folder"
  echo "Files :"
  current_files=$(find . -maxdepth 1 -type f)
  for i in $current_files; do
    #Move though each item in the folder passed and -
    if [[ -f $i ]]; then
      ### if its a file pass it to backupTest
      backupTest $i
    ##other wise give an error.
    else
      echo "ERROR : $i is of unexpected type."
    fi
  done
fi

## Destroy folder structure from base folder
rm -R $test_dir
