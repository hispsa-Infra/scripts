#!/bin/bash
#_   _ _____ ___________   _____  ___
#| | | |_   _/  ___| ___ \ /  ___|/ _ \
#| |_| | | | \ `--.| |_/ / \ `--./ /_\ \
#|  _  | | |  `--. \  __/   `--. \  _  |
#| | | |_| |_/\__/ / |     /\__/ / | | |
#\_| |_/\___/\____/\_|     \____/\_| |_/
#Setting up a server, allows for switches to change the type of server deployed.
#Author	: Renier Rousseau
#Created Date 	: 2 October 2017


#Variables
logfile=setup.log
#Flags
webserver_flag=0
dbserver_flag=0
storage_flag=0

#functions
#Parameters - usage
usage() {
  echo "Usage: $PROG [options]"
  echo "Ommit options to just to do the basic setup"
  echo " -w     Setup a webserver"
  echo " -d     Setup a database server"
  echo " -s     Setup a storage server"
  echo " -h     Print this message"
}
#timestamp
timestamp(){
  date | tee -a $logfile
}

# Dealing with the parameters
while getopts ":h :w :d :s :v" opt;
do
  case $opt in
    h)
      usage;
      exit;
      ;;
    w)
      webserver_flag=1
      ;;
    d)
      dbserver_flag=1
      ;;
    s)
      storage_flag=1
      ;;
    /?)
      usage >&2
      exit 1;
      ;;
    :)
      usage >&2
      exit 1
  esac
done

shift $(( $OPTIND-1 ))

#TODO remove these tests
#Testing webserver_flag
if [[ $webserver_flag = 1 ]]; then
  echo "webserver_flag is On"
elif [[ $webserver_flag = 0 ]]; then
  echo "webserver_flag is Off"
fi
#Testing dbserver_flag
if [[ $dbserver_flag = 1 ]]; then
  echo "dbserver_flag is On"
elif [[ $dbserver_flag = 0 ]]; then
  echo "dbserver_flag is Off"
fi
#Testing storage_flag
if [[ $storage_flag = 1 ]]; then
  echo "storage_flag is On"
elif [[ $storage_flag = 0 ]]; then
  echo "storage_flag is Off"
fi

#Create working folders
mkdir ~/scripts
mkdir ~/scripts/setup

#Userfeedback - initial
clear
echo "******************************************"
echo "** Welcome to the HISP SA server setup. **"
echo "******************************************"
#into the log
echo "Server setup started" > $logfile
timestamp
echo "Flags have been set as following" | tee -a $logfile
echo "verbose_flag = $verbose_flag" | tee -a $logfile
echo "storage_flag = $storage_flag" | tee -a $logfile
echo "dbserver_flag = $dbserver_flag" | tee -a $logfile
echo "webserver_flag = $webserver_flag" | tee -a $logfile
#Downloading files required for the setup
#TODO add error checkcing on downloaded files
#netwrok setup docs
wget -O ~/scripts/setup/ethadd https://raw.githubusercontent.com/hispsa-Infra/scripts/master/setup/ethadd
wget -O ~/scripts/setup/sshsecurekey https://raw.githubusercontent.com/hispsa-Infra/scripts/master/setup/sshsecurekey
wget -O ~/scripts/setup/sshsecureport https://raw.githubusercontent.com/hispsa-Infra/scripts/master/setup/sshsecureport

#install supporting software
#updateing the apt tree
echo ""  | tee -a $logfile
echo "*****************" | tee -a $logfile
echo "** apt update **"  | tee -a $logfile
echo "*****************" | tee -a $logfile
timestamp
sudo apt update | tee -a $logfile

#upgrade pre isntalled software
echo ""  | tee -a $logfile
echo "*****************" | tee -a $logfile
echo "** apt upgrade **" | tee -a $logfile
echo "*****************" | tee -a $logfile
timestamp
sudo apt update | tee -a $logfile

#setting up the network
echo "" | tee -a $logfile
clear
timestamp
echo "*******************" | tee -a $logfile
echo "** Network Setup **" | tee -a $logfile
echo "*******************" | tee -a $logfile
#Setting up the back link ip
#TODO add this too the parameters
echo "*** USER INPUT *** Please enter the IP for the 3rd octate"
read inputIp
echo "bash ~/scripts/setup/ethadd $inputIp" | tee -a $logfile
bash ~/scripts/setup/ethadd $inputIp | tee -a $logfile

#securing the network
#TODO add this too parameters
echo "*** USER INPUT *** Please enter the port for SSH"
read inputPort
echo "bash ~/scripts/setup/sshsecureport $inputPort" | tee -a $logfile
bash ~/scripts/setup/sshsecureport $inputPort | tee -a $logfile
echo "bash ~/scripts/setup/sshsecurekey $inputPort" | tee -a $logfile
bash ~/scripts/setup/sshsecurekey  | tee -a $logfile
